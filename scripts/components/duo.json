{
  "app.js": {
    "id": "app.js",
    "type": "js",
    "mtime": 1408695227000,
    "src": "var $ = require(\"./vendor/jquery\");\nvar _ = require(\"./vendor/underscore\");\nvar Backbone = require(\"./vendor/backbone\");\nvar Epoxy = require(\"./vendor/backbone.epoxy.min\");\n\nvar Products = require(\"./collections/Products\");\nvar Catagories = require(\"./collections/Categories\");\nvar Address = require(\"./models/Address\");\nvar ProudctOrder = require(\"./models/ProductOrder\");\nvar views = require(\"./views\");\n\nvar _gaq = _gaq || [];\n_gaq.push(['_setAccount', 'UA-37375670-2']);\n_gaq.push(['_trackPageview']);\n\n(function() {\t\n  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n  ga.src = 'https://ssl.google-analytics.com/ga.js';\n  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n})();\n\n(function() {\nvar catagoryFull = new Catagories();\nvar productFull = new Products();\nvar ourShipping = new Address();\nvar ourDesign = new Design();\nvar selection = new ProductOrder();\nvar shop = window.shop = new views.Shop({\n\tel: $('.app'),\n\tcategories: catagoryFull,\n\tproducts: productFull,\n\tshipping: ourShipping,\n\tdesign: ourDesign,\n\tselection: selection\n});\nchrome.storage.sync.get('clickShirtData', _.bind(function(e) {\n\tconsole.log(e);\n\tourShipping.set(_.pick(e.clickShirtData, \n\t\t['address1',\n\t\t 'address2',\n\t\t 'name',\n\t\t 'country',\n\t\t 'zip',\n\t\t 'state', \n\t\t 'city']\n\t));\n\tshop.productSelected(_.pick(e.clickShirtData, \n\t\t['productId',\n\t\t'color',\n\t\t'size',\n\t\t'quantity',\n\t\t'selectedColor']\n\t));\n\tselection.fetch({replace:false});\n}, this));\n/*var designManager = window.designManager = new ProfileManager({\n\tmodel: ourDesign\n});*/\nvar cats = [];\nvar catIds = [\n\t'mugs',\n\t'phone-cases',\n\t'long-sleeve-shirts',\n\t'short-sleeve-shirts'];\nfor (var cat in catIds) {\n\tvar inst = new Category({categoryId: catIds[cat]});\n\tinst.fetch();\n\tcats.push(inst);\n}\ncatagoryFull.add(cats);\n//Pre-select Ladies Short Sleve\nwindow.shop.optionSelected('short-sleeve-shirts');\n$('a[value=\"short-sleeve-shirts\"]').parent().addClass('active');\nshop.render();\n})();",
    "deps": {
      "./collections/Products": "collections/Products.js",
      "./collections/Categories": "collections/Categories.js",
      "./models/Address": "models/Address.js",
      "./models/ProductOrder": "models/ProductOrder.js",
      "./views": "views.js"
    },
    "entry": true
  },
  "models.js": {
    "id": "models.js",
    "type": "js",
    "mtime": 1408423958000,
    "src": "\tvar BaseModel = Backbone.Epoxy.Model.extend({\n\t\tinitialize: function(options) {\n\n\t\t\tBaseModel.__super__.initialize.apply(this, arguments);\n\t\t}\n\t});\n\n\tvar Category = BaseModel.extend({\n\t\tidAttribute: \"categoryId\",\n\t\tdefaults: {\n\t\t\tcategoryId: \"\",\n\t\t\ttype: \"\",\n\t\t\tname: \"\",\n\t\t\tfamily: \"\",\n\t\t\turl: \"\",\n\t\t\tproducts: []\n\t\t},\n\t\tcomputeds: {\n\t\t\tlabel: {\n\t\t\t\tdeps: ['name'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('name');\n\t\t\t\t}\n\t\t\t},\n\t\t\tvalue: {\n\t\t\t\tdeps: ['categoryId'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('categoryId');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\turl: function(options) {\n\t\t\treturn globalApi + \"/categories/\" + this.id;\n\t\t}\n\t});\n\n\tvar Product =  BaseModel.extend({\n\t\tidAttribute: 'id',\n\t\tdefaults: {\n\t\t\tcomments: \"\",\n\t\t\tdescription: \"\",\n\t\t\tname: \"\",\n\t\t\ttype: \"\",\n\t\t\tproperties: {},\n\t\t\tcolors: [],\n\t\t\tadditionalImages: [],\n\t\t\timage: {},\n\t\t\tavailable: true,\n\t\t\turl: \"\",\n\t\t\tproductId: \"\",\n\t\t\tArtwork: \"\"\n\t\t},\n\t\tcomputeds: {\n\t\t\tlabel: {\n\t\t\t\tdeps: ['name'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('name');\n\t\t\t\t}\n\t\t\t},\n\t\t\tvalue: {\n\t\t\t\tdeps: ['id'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('id');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\turl: function() {\n\t\t\treturn globalApi + \"/products/\" + this.id;\n\t\t}\n\t});\n\n\tvar ProductOrder =  BaseModel.extend({\n\t\tidAttribute: 'id',\n\t\tdefaults: {\n\t\t\tsize: \"\",\n\t\t\tcolors: [],\n\t\t\tcolor: \"\",\n\t\t\tselectedColor: {},\n\t\t\tadditionalImages: [],\n\t\t\timage: {},\n\t\t\tquantity: 0,\n\t\t\tid: \"\"\n\t\t},\n\t\turl: function() {\n\t\t\treturn globalApi + \"/products/\" + this.id;\n\t\t}\n\t});\n\n\tvar QuoteOrder = BaseModel.extend({\n\t\tdefaults: {\n\t\t\ttype: \"\",\n\t\t\tdesignId: \"\",\n\t\t\tsides: {},\n\t\t\tproducts: [],\n\t\t\taddress: {}\n\t\t},\n\n\t\turl: function(options) {\n\t\t\treturn globalApi + \"/quote\";\n\t\t}\n\t});\n\n\tvar Sides = BaseModel.extend({\n\t\tdefaults: {\n\t\t\tfront: 1,\n\t\t\tback: 0,\n\t\t\tright: 0,\n\t\t\tleft: 0\n\t\t}\n\t});\n\n\tvar OrderProduct = BaseModel.extend({\n\t\tdefaults: {\n\t\t\tid: \"\",\n\t\t\tcolor: \"\",\n\t\t\tsize: \"\",\n\t\t\tquantity: 1\n\t\t}\n\t});\n\n\tvar Address = BaseModel.extend({\n\t\tdefaults: {\n\t\t\temail: \"\",\n\t\t\tname: \"\",\n\t\t\tcompany: \"\",\n\t\t\taddress1: \"\",\n\t\t\taddress2: \"\",\n\t\t\tcity: \"\",\n\t\t\tstate: \"\",\n\t\t\tzip: 0,\n\t\t\tcountry: \"US\"\n\t\t}\n\t});\n\n\tvar QuoteResponse = BaseModel.extend({\n\t\tdefaults: {\n\t\t\ttotal: 0,\n\t\t\twarning: [],\n\t\t\tissues: [],\n\t\t\torderIssues: [],\n\t\t\torderToken: \"\",\n\t\t\tstatusCode: 0,\n\t\t\tmode: \"\"\n\t\t}\n\t});\n\n\tvar ProductType = BaseModel.extend({\n\t\tdefaults: {\n\t\t\tname: \"\",\n\t\t\tstyle: 0,\n\t\t\timage: {},\n\t\t\tid: \"\",\n\t\t\turl: \"\"\n\t\t},\n\t\turl: function() {\n\t\t\treturn globalApi + \"/categories/\" + this.id;\n\t\t}\n\t});\n\n\n\tvar OrderResponse = BaseModel.extend({\n\t\tdefaults: {\n\t\t\ttotal: 0,\n\t\t\totherToken: \"\",\n\t\t\tcreatedAt: \"\",\n\t\t\twarnings: [],\n\t\t\tevents: [],\n\t\t\titems: [],\n\t\t\torderId: \"\",\n\t\t\tmode: \"\"\n\t\t},\n\t\turl: function() {\n\t\t\treturn globalApi + \"/order/\" + this.id;\n\t\t}\n\t});\n\n\tvar Design = BaseModel.extend({\n\t\tdefaults: {\n\t\t\tname: \"\",\n\t\t\ttype: \"\",\n\t\t\tsides: {},\n\t\t\tcreatedAt: \"\",\n\t\t\tdesignId: \"\",\n\t\t\tmode: \"\"\n\t\t},\n\t\turl: function() {\n\t\t\treturn \"http://api.fb.dev.metv.bz/sio\";\n\t\t}\n\t});\n",
    "deps": {}
  },
  "collections.js": {
    "id": "collections.js",
    "type": "js",
    "mtime": 1408691125000,
    "src": "\trequire(\"./models.js\");\n\tvar BaseCollection = Backbone.Collection.extend({\n\t\tmodel: BaseModel,\n\t\tinitialize: function(options) {\n\n\t\t\tBaseCollection.__super__.initialize.apply(this, arguments);\n\t\t}\n\t})\n\tvar Catagories = BaseCollection.extend({\n\t\tmodel: Category,\n\t\tcomparator: 'family',\n\n\t\turl: function() {\n\t\t\treturn globalApi + \"/categories\"\n\t\t}\n\t});\n\n\tvar Designs = BaseCollection.extend({\n\t\tmodel:Design,\n\t\tcomparator: 'createdAt',\n\n\t\turl: function() {\n\t\t\treturn globalApi + \"\"\n\t\t}\n\t});\n\n\tvar Products = BaseCollection.extend({\n\t\tmodel: Product,\n\t\tcomparator: 'available',\n\n\t\turl: function() {\n\t\t\treturn globalApi + \"/products/\"\n\t\t}\n\t});\n\n\tvar OrderCollection = BaseCollection.extend({\n\t\tmodel: OrderResponse,\n\t\turl: function() {\n\t\t\treturn globalApi + \"/order\"\n\t\t}\n\t});\n",
    "deps": {
      "./models.js": "models.js"
    }
  },
  "models/Address.js": {
    "id": "models/Address.js",
    "type": "js",
    "mtime": 1408692282000,
    "src": "var BaseModel = reqiure(\"./models/BaseModel\");\n\tvar Address = BaseModel.extend({\n\t\tdefaults: {\n\t\t\temail: \"\",\n\t\t\tname: \"\",\n\t\t\tcompany: \"\",\n\t\t\taddress1: \"\",\n\t\t\taddress2: \"\",\n\t\t\tcity: \"\",\n\t\t\tstate: \"\",\n\t\t\tzip: 0,\n\t\t\tcountry: \"US\"\n\t\t}\n\t});",
    "deps": {}
  },
  "collections/Products.js": {
    "id": "collections/Products.js",
    "type": "js",
    "mtime": 1408695354000,
    "src": "var $ = require(\"../vendor/jquery\");\nvar _ = require(\"../vendor/underscore\");\nvar Backbone = require(\"../vendor/backbone\");\nvar Epoxy = require(\"../vendor/backbone.epoxy.min\");\nvar BaseCollection = require(\"./BaseCollection\");\nvar Product = require(\"../models/Product\");\nvar Products = BaseCollection.extend({\n\t\tmodel: Product,\n\t\tcomparator: 'available',\n\n\t\turl: function() {\n\t\t\treturn globalApi + \"/products/\"\n\t\t}\n\t});",
    "deps": {
      "./BaseCollection": "collections/BaseCollection.js",
      "../models/Product": "models/Product.js"
    }
  },
  "collections/Categories.js": {
    "id": "collections/Categories.js",
    "type": "js",
    "mtime": 1408692977000,
    "src": "var BaseCollection = require(\"./collections/BaseCollection\");\nvar Category = require(\"../models/Category\");\nvar Catagories = BaseCollection.extend({\n\t\tmodel: Category,\n\t\tcomparator: 'family',\n\n\t\turl: function() {\n\t\t\treturn globalApi + \"/categories\"\n\t\t}\n\t});",
    "deps": {
      "../models/Category": "models/Category.js"
    }
  },
  "models/ProductOrder.js": {
    "id": "models/ProductOrder.js",
    "type": "js",
    "mtime": 1408692331000,
    "src": "var BaseView = require(\"./models/BaseModel\");\nvar ProductOrder =  BaseModel.extend({\n\t\tidAttribute: 'id',\n\t\tdefaults: {\n\t\t\tsize: \"\",\n\t\t\tcolors: [],\n\t\t\tcolor: \"\",\n\t\t\tselectedColor: {},\n\t\t\tadditionalImages: [],\n\t\t\timage: {},\n\t\t\tquantity: 0,\n\t\t\tid: \"\"\n\t\t},\n\t\turl: function() {\n\t\t\treturn globalApi + \"/products/\" + this.id;\n\t\t}\n\t});",
    "deps": {}
  },
  "views.js": {
    "id": "views.js",
    "type": "js",
    "mtime": 1408692719000,
    "src": "var BaseModel = require('./models/BaseModel');\nBackbone.Epoxy.binding.addHandler('validate', {\n\t\tinit: function ($boundEl, params, bindings, context) {\n\t\t\tthis.validations = params.validations;\n\n\t\t\tfor (var i = 0; i < this.validations.length; i++) {\n\t\t\t\tthis.validations[i].id = _.uniqueId(this.validations[i].type);\n\t\t\t}\n\n\t\t\tthis.$validationContainer = $boundEl.closest('.form-group');\n\t\t},\n\n\t\tget: function ($boundEl, value, evt) {\n\n\t\t},\n\n\t\tset: function ($boundEl, params) {\n\t\t\tfor (var i = 0; i < this.validations.length; i++) {\n\t\t\t\tvar type = this.validations[i].type;\n\t\t\t\tvar validationParams = this.validations[i].params;\n\t\t\t\tvar id = this.validations[i].id;\n\n\t\t\t\tvar result = this['validate_' + type](params.value, validationParams);\n\n\t\t\t\tif (result === true) {\n\t\t\t\t\tthis.clearFailedValidations(id);\n\t\t\t\t} else {\n\t\t\t\t\tvar severity = 'danger';\n\n\t\t\t\t\tif (typeof result === 'object') {\n\t\t\t\t\t\tseverity = result.severity;\n\t\t\t\t\t\tresult = result.message;\n\t\t\t\t\t}\n\t\t\t\t\tthis.clearFailedValidations(id);\n\t\t\t\t\tthis.addFailedValidation(result, id, severity);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\taddFailedValidation: function (result, id, severity) {\n\t\t\tvar existingError = this.getValidationError(id, severity);\n\n\t\t\tif (!existingError || !existingError.length) {\n\t\t\t\tif (severity === 'danger' || severity === 'error') {\n\t\t\t\t\tthis.$validationContainer.addClass('has-error');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tclearFailedValidations: function (id) {\n\t\t\tthis.getValidationError(id).remove();\n\n\t\t\t// If there are no more validation messages, remove the error class\n\t\t\tif (0 === this.$validationContainer.find('.validation-message').length) {\n\t\t\t\tthis.$validationContainer.removeClass('has-error');\n\t\t\t}\n\t\t},\n\n\t\tgetValidationError: function (id, severity) {\n\t\t\tvar query = '[data-id=' + id + ']';\n\n\t\t\tif (severity) {\n\t\t\t\tquery += '[data-severity=' + severity + ']';\n\t\t\t}\n\n\t\t\treturn this.$validationContainer.find(query);\n\t\t},\n\n\t\tvalidate_number: function (value, validationParams) {\n\t\t\tvar result = true;\n\n\t\t\tif (value === null || value === undefined) {\n\t\t\t\tvalue = 0;\n\t\t\t}\n\n\t\t\tif (validationParams.max !== undefined && validationParams.max < value) {\n\t\t\t\treturn 'Max ' + validationParams.max;\n\t\t\t}\n\n\t\t\tif (validationParams.min !== undefined && value < validationParams.min) {\n\t\t\t\treturn 'Min ' + validationParams.min;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\tvalidate_length: function (value, validationParams) {\n\t\t\tvar result = true;\n\n\t\t\tif (value === null || value === undefined) {\n\t\t\t\tvalue = '';\n\t\t\t}\n\n\t\t\tif (validationParams.max !== undefined) {\n\t\t\t\tif (validationParams.max < value.length) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: 'Max length: ' + validationParams.max + ' (Currently: ' + value.length + ')',\n\t\t\t\t\t\tseverity: validationParams.severity || 'error'\n\t\t\t\t\t};\n\t\t\t\t} else if (validationParams.min !== undefined && value.length < validationParams.min) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: 'Min length: ' + validationParams.min + ' (Currently: ' + value.length + ')',\n\t\t\t\t\t\tseverity: validationParams.severity || 'error'\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tseverity: 'info',\n\t\t\t\t\t\tmessage: 'Remaining: ' + (validationParams.max - value.length)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\treturn result;\n\t\t},\n\n\t\tvalidate_regexMatch: function (value, validationParams) {\n\t\t\tvar result = true;\n\n\t\t\tif (value === null || value === undefined) {\n\t\t\t\tvalue = '';\n\t\t\t}\n\n\t\t\tif (typeof validationParams.pass === 'string') {\n\t\t\t\tvalidationParams.pass = new RegExp(validationParams.pass, 'g');\n\t\t\t}\n\n\t\t\tif (typeof validationParams.fail === 'string') {\n\t\t\t\tvalidationParams.fail = new RegExp(validationParams.fail, 'g');\n\t\t\t}\n\n\t\t\tvar passMatches = value.match(validationParams.pass);\n\t\t\tvar failMatches = value.match(validationParams.fail);\n\n\t\t\tif (validationParams.pass && passMatches !== null && 0 === passMatches.length) {\n\t\t\t\treturn validationParams.message || 'No matches for ' + validationParams.pass;\n\t\t\t} else if (validationParams.fail && failMatches !== null && 0 < failMatches.length) {\n\t\t\t\treturn validationParams.message || 'Matched ' + validationParams.fail;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\nvar BaseView = Backbone.Epoxy.View.extend({\n\tinitialize: function(options) {\n\t\tthis.options = options || {};\n\t\tBaseView.__super__.initialize.apply(this);\n\t},\n\n\trender: function() {\n\t\tthis.applyBindings();\n\t\tthis.delegateEvents();\n\t\tBaseView.__super__.render.apply(this);\n\t}\n\n});\nvar dropDown = BaseView.extend({\n\tevents: {\n\t\t'click button': 'findCatagories',\n\t\t'change select': 'categoryPicked'\n\t},\n\tbindings: {\n\t\t'select': 'options:collection, optionsDefault:defaultOption',\n\t\t'h2': 'html:titleLabel'\n\t},\n\tinitialize: function(options) {\n\t\tthis.options = options || {};\n\n\t\tthis.collection = this.options.collection;\n\t\tthis.viewModel = new BaseModel({\n\t\t\tcollection: this.collection,\n\t\t\tdefaultOption: this.options.defaultOption,\n\t\t\ttitleLabel: this.options.titleLabel\n\t\t})\n\t\tdropDown.__super__.initialize.apply(this, arguments);\n\t},\n\n\trender: function() {\n\t\tthis.$el.html(templates.dropDown());\n\n\t\tdropDown.__super__.render.apply(this, arguments);\n\t\treturn this;\n\t},\n\n\tcategoryPicked: function(e) {\n\t\tvar value = $(e.currentTarget).val();\n\t\tthis.trigger('option_selected', value);\n\t\t//this.on('change select', this.categoryPicked, this);\n\t}\n});\nvar PillView = BaseView.extend({\n\ttagName: 'li',\n\tevents: {\n\t\t'click a': 'pillClicked'\n\t},\n\tinitialize: function(options) {\n\t\tPillView.__super__.initialize.apply(this, arguments);\n\t\tthis.render();\n\t\tthis.model.on('sync', this.render, this);\n\t},\n\trender: function() {\n\t\tthis.$el.html(templates.Pill({\n\t\t\tmodel: this.model.toJSON({computed: true})\n\t\t}));\n\t\tPillView.__super__.render.apply(this, arguments);\n\t},\n\tpillClicked: function(e) {\n\t\tthis.$el.siblings().each(function () {\n\t\t\t$(this).removeClass('active');\n\t\t});\n\t\tthis.$el.addClass('active');\n\t\tvar value = $(e.currentTarget).val();\n\t\tthis.model.collection.trigger('option_selected', this.model);\n\t}\n});\nvar PillListView = BaseView.extend({\n\titemView: PillView,\n\tclassName:\"nav nav-pills\",\n\trender: function() {\n\t\tthis.$el.html(templates.PillList());\n\t\tPillListView.__super__.render.apply(this);\n\t}\n})\nvar addressForm = BaseView.extend({\n\tbindings: {\n\t\t'.address-email input': 'value:email',\n\t\t'.address-name input': 'value:name',\n\t\t'.address-company input': 'value:company',\n\t\t'.address-address1 input': 'value:address1',\n\t\t'.address-address2 input': 'value:address2',\n\t\t'.address-city input': 'value:city',\n\t\t'.address-state input': 'value:state',\n\t\t'.address-zip input': 'value:zip',\n\t\t'label': 'classes:{\"col-xs-2\": true, \"control-label\":true}',\n\t\t'div.address': 'classes:{\"col-xs-10\": true}',\n\t\t'div.address input': 'classes:{\"form-control\":true}'\n\t},\n\tvalidation: {\n\t\t'.address-email input': {\n\t\t\tvalue: 'email',\n\t\t\tvalidations: [{\n\t\t\t\ttype: 'length',\n\t\t\t\tparams: {\n\t\t\t\t\tmin: 1,\n\t\t\t\t\tmax:100\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\t'.address-name input': {\n\t\t\tvalue: 'name',\n\t\t\tvalidations: [{\n\t\t\t\ttype: 'length',\n\t\t\t\tparams: {\n\t\t\t\t\tmin: 1,\n\t\t\t\t\tmax:100,\n\t\t\t\t\tseverity: 'error'\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\t'.address-address1 input': {\n\t\t\tvalue: 'address1',\n\t\t\tvalidations: [{\n\t\t\t\ttype: 'length',\n\t\t\t\tparams: {\n\t\t\t\t\tmin: 5,\n\t\t\t\t\tmax:100,\n\t\t\t\t\tseverity: 'error'\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\t'.address-city input': {\n\t\t\tvalue: 'city',\n\t\t\tvalidations: [{\n\t\t\t\ttype: 'length',\n\t\t\t\tparams: {\n\t\t\t\t\tmin:1,\n\t\t\t\t\tmax:100\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\t'.address-state input': {\n\t\t\tvalue: 'state',\n\t\t\tvalidations: [{\n\t\t\t\ttype: 'length',\n\t\t\t\tparams: {\n\t\t\t\t\tmin: 1,\n\t\t\t\t\tmax:100\n\t\t\t\t}\n\t\t\t}]\n\t\t},\n\t\t'.address-zip input': {\n\t\t\tvalue: 'zip',\n\t\t\tvalidations: [{\n\t\t\t\ttype: 'length',\n\t\t\t\tparams: {\n\t\t\t\t\tmin: 1,\n\t\t\t\t\tmax:100\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t},\n\trender: function() {\n\t\tthis.$el.html(templates.address());\n\t\taddressForm.__super__.render.apply(this, arguments);\n\t\tthis.applyValidation();\n\t\treturn this;\n\t},\n\tapplyValidation: function () {\n\t\tif (!this.validation) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar keys = _.keys(this.validation);\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tvar key = keys[i];\n\t\t\tvar binding = this.bindings[key] ? this.bindings[key] + ',' : '';\n\t\t\tvar curr = this.validation[key];\n\n\t\t\tbinding += 'validate:{value: ' + curr.value + ', validations: ' + JSON.stringify(curr.validations) + '}';\n\n\t\t\tthis.bindings[key] = binding;\n\t\t}\n\n\t\tthis.applyBindings();\n\t}\n});\n\nvar Thumbnail = BaseView.extend({\n\tclassName:\"col-xs-6 col-md-3 productModel\",\n\tevents: {\n\t\t'click .fa-circle': 'pickColor'\n\t},\n\tbindings: {\n\t\t//'.thumbnail': 'toggle:not(info)',\n\t\t//'.panel': 'toggle:info',\n\t\t'.fa-check-circle': 'toggle:available'\n\t},\n\tinitialize: function(options) {\n\t\tthis.viewModel = new BaseModel({\n\t\t\tinfo: false\n\t\t});\n\t\tthis.model.fetch({\n\t\t\tsuccess: _.bind(this.render, this)\n\t\t});\n\t\tThumbnail.__super__.initialize.apply(this, arguments);\n\t},\n\trender: function() {\n\t\tthis.$el.html(templates.ProductModelView({product: this.model.toJSON()}));\n\t\tThumbnail.__super__.render.apply(this, arguments);\n\t},\n\tgetDetails: function() {\n\t\tthis.model.fetch({\n\t\t\tsuccess: _.bind(function(){\n\t\t\t\tthis.viewModel.set('info', true);\n\t\t\t\t//this.render();\n\t\t\t}, this)\n\t\t});\n\t},\n\ttoggleInfo: function() {\n\t\tthis.viewModel.set('info', !this.viewModel.get('info'));\n\t},\n\tpickColor: function(e) {\n\t\tvar product = this.model.toJSON();\n\t\tvar color = this.model.get('colors')[$(e.currentTarget).data('color')];\n\t\tthis.model.collection.trigger('option_selected', _.extend(product, {\n\t\t\t\tselectedColor: color,\n\t\t\t\tcolor: color.name,\n\t\t\t\tsizes: color.sizes\n\t\t\t})\n\t\t);\n\t\t$('html, body').animate({\n\t\t   scrollTop: $('.product-selection').offset().top\n\t\t}, 'slow');\n\t}\n});\n\nvar ImageArray = BaseView.extend({\n\titemView: Thumbnail,\n\trender: function() {\n\t\tthis.$el.html(templates.ImageContainer());\n\t\tImageArray.__super__.render.apply(this);\n\t}\n});\n\nvar SelectedProduct = BaseView.extend({\n\tclassName: 'selectedProduct',\n\tbindings: {\n\t\t'.size-select': 'options:sizes',\n\t\t'.qty-select': 'options:[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], optionsDefault:1'\n\t},\n\tevents: {\n\t\t'click .close': 'closeButton',\n\t\t'click .fa-circle': 'pickColor',\n\t\t'change .size-select': 'sizeSelect',\n\t\t'change .qty-select': 'qtySelect'\n\t},\n\trender: function() {\n\t\tthis.$el.html(templates.SelectedProductView({\n\t\t\tproduct: this.model.toJSON({\n\t\t\t\tcomputed: true\n\t\t\t})\n\t\t}));\n\t\tthis.$el.show();\n\t\tSelectedProduct.__super__.render.apply(this, arguments);\n\t},\n\tcloseButton: function() {\n\t\tthis.model.destroy();\n\t\tthis.$el.hide();\n\t},\n\tpickColor: function(e) {\n\t\tvar product = this.model.toJSON();\n\t\tvar color = this.model.get('colors')[$(e.currentTarget).data('color')];\n\t\tthis.collection.trigger('option_selected', _.extend(product, {\n\t\t\t\tselectedColor: color,\n\t\t\t\tcolor: color.name,\n\t\t\t\tsizes: color.sizes\n\t\t\t})\n\t\t);\n\t\t$('html, body').animate({\n\t\t   scrollTop: $('.product-selection').offset().top\n\t\t}, 'slow');\n\t},\n\tsizeSelect: function(e) {\n\t\tvar size = $(e.currentTarget).val();\n\t\tthis.model.set('size', size);\n\t},\n\tqtySelect: function(e) {\n\t\tvar qty = $(e.currentTarget).val();\n\t\tthis.model.set('quantity', qty);\n\t}\n});\n\nvar Shop = BaseView.extend({\n\tevents: {\n\t\t'click .btn-save': 'handleQuote'\n\t},\n\tbindings: {\n\t\t'img': 'attr:{\"src\":img}'\n\t},\n\tinitialize: function(options) {\n\t\tthis.options = options || {};\n\t\tthis.categories = this.options.categories;\n\t\tthis.products = this.options.products;\n\t\tthis.shipping = this.options.shipping;\n\t\tthis.prodSelection = this.options.selection;\n\t\tthis.viewModel = new BaseModel({\n\t\t\timg:\"\"\n\t\t});\n\t\tShop.__super__.initialize.apply(this. arguments);\n\t},\n\n\trender: function() {\n\t\tthis.$el.html(templates.App());\n\t\tthis.$catagorySelect = this.$el.find('.category-pills');\n\t\tthis.$addressForm = this.$el.find('.address-form');\n\t\tthis.$images = this.$el.find('.image-container');\n\t\tthis.$selection = this.$el.find('.product-selection');\n\t\tthis.buildSubviews();\n\t\tShop.__super__.render.apply(this, arguments);\n\t},\n\n\tbuildSubviews: function (){\n\t\tthis.categoryDropDown = new PillListView({\n\t\t\tcollection: this.categories,\n\t\t\tel: this.$catagorySelect\n\t\t});\n\t\tthis.categoryDropDown.render();\n\n\t\tthis.addressWiget = new addressForm({\n\t\t\tmodel: this.shipping,\n\t\t\tel: this.$addressForm\n\t\t});\n\t\tthis.addressWiget.render();\n\n\t\tthis.imageArray = new ImageArray({\n\t\t\tcollection: this.products,\n\t\t\tel: this.$images\n\t\t});\n\n\t\tthis.productSelection = new SelectedProduct({\n\t\t\tcollection: this.products,\n\t\t\tel: this.$selection\n\t\t});\n\n\t\tthis.categories.on('option_selected', this.optionSelected, this);\n\t\tthis.products.on('option_selected', this.productSelected, this);\n\t\tthis.on('sendQuote', this.sendQuote, this);\n\t},\n\n\toptionSelected: function(e) {\n\t\tthis.catSelection = this.categories.get(e);\n\t\tthis.catSelection.fetch({\n\t\t\tsuccess: _.bind(this.gotProducts, this)\n\t\t});\n\t},\n\n\tgotProducts: function() {\n\t\tthis.products.reset(this.catSelection.get('products'));\n\t\tthis.products.trigger('update');\n\t\tthis.imageArray.render();\n\t},\n\n\tproductSelected: function(e) {\n\t\tthis.prodSelection.set(e);\n\t\tthis.productSelection.model = this.prodSelection;\n\t\tthis.productSelection.render();\n\t},\n\thandleQuote: function() {\n\t\tvar order = _.extend({}, _.pick(this.prodSelection.toJSON(), \n\t\t\t['productId',\n\t\t\t'color',\n\t\t\t'size',\n\t\t\t'quantity',\n\t\t\t'selectedColor']));\n\t\torder = _.extend({}, order, _.pick(this.shipping.toJSON(),\n\t\t\t['address1',\n\t\t\t 'address2',\n\t\t\t 'name',\n\t\t\t 'country',\n\t\t\t 'zip',\n\t\t\t 'state', \n\t\t\t 'city']));\n\t\torder.type = 'dtg';\n\t\torder.sides = {front:1};\n\t\torder.placeOrder = 1;\n\t\torder.width = 12;\n\t\torder.artwork = \"http://google.com/default.png\";\n\t\torder.productImage = this.prodSelection.get('image').url;\n\n\t\tthis.quote = _.extend({}, order);\n\t\t// Save it using the Chrome extension storage API.\n\t\tchrome.storage.sync.set({clickShirtData: order}, _.bind(function() {\n\t\t\tthis.viewModel.set('saving_user', false);\n\t\t}, this));\n\t},\n\tsendQuote: function(link) {\n\t\tvar link = link.data;\n\t\tif (link.srcUrl) {\n\t\t\tthis.quote.Artwork = link.srcUrl;\n\t\t\t$.ajax({\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: this.quote,\n\t\t\t\turl: postApi,\n\t\t\t\tsuccess: _.bind(function(data){\n\t\t\t\t\talert(JSON.stringify(data));\n\t\t\t\t}, this)\n\t\t\t});\n\t\t}\n\t}\n});",
    "deps": {
      "./models/BaseModel": "models/BaseModel.js"
    }
  },
  "collections/BaseCollection.js": {
    "id": "collections/BaseCollection.js",
    "type": "js",
    "mtime": 1408695344000,
    "src": "var $ = require(\"../vendor/jquery\");\nvar _ = require(\".//vendor/underscore\");\nvar Backbone = require(\"../vendor/backbone\");\nvar Epoxy = require(\"../vendor/backbone.epoxy.min\");\nvar BaseModel = require(\"../models/BaseModel\");\nvar BaseCollection = Backbone.Collection.extend({\n\tmodel: BaseModel,\n\tinitialize: function(options) {\n\n\t\tBaseCollection.__super__.initialize.apply(this, arguments);\n\t}\n});",
    "deps": {
      "../models/BaseModel": "models/BaseModel.js"
    }
  },
  "models/Product.js": {
    "id": "models/Product.js",
    "type": "js",
    "mtime": 1408695250000,
    "src": "var $ = require(\"./vendor/jquery\");\nvar _ = require(\"./vendor/underscore\");\nvar Backbone = require(\"./vendor/backbone\");\nvar Epoxy = require(\"./vendor/backbone.epoxy.min\");\nvar BaseModel = require(\"../models/BaseModel\");\nvar Product =  BaseModel.extend({\n\t\tidAttribute: 'id',\n\t\tdefaults: {\n\t\t\tcomments: \"\",\n\t\t\tdescription: \"\",\n\t\t\tname: \"\",\n\t\t\ttype: \"\",\n\t\t\tproperties: {},\n\t\t\tcolors: [],\n\t\t\tadditionalImages: [],\n\t\t\timage: {},\n\t\t\tavailable: true,\n\t\t\turl: \"\",\n\t\t\tproductId: \"\",\n\t\t\tArtwork: \"\"\n\t\t},\n\t\tcomputeds: {\n\t\t\tlabel: {\n\t\t\t\tdeps: ['name'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('name');\n\t\t\t\t}\n\t\t\t},\n\t\t\tvalue: {\n\t\t\t\tdeps: ['id'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('id');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\turl: function() {\n\t\t\treturn globalApi + \"/products/\" + this.id;\n\t\t}\n\t});",
    "deps": {
      "../models/BaseModel": "models/BaseModel.js"
    }
  },
  "models/BaseModel.js": {
    "id": "models/BaseModel.js",
    "type": "js",
    "mtime": 1408695323000,
    "src": "var $ = require(\"../vendor/jquery\");\nvar _ = require(\"../vendor/underscore\");\nvar Backbone = require(\"../vendor/backbone\");\nvar Epoxy = require(\"../vendor/backbone.epoxy.min\");\nvar BaseModel = Backbone.Epoxy.Model.extend({\n\tinitialize: function(options) {\n\n\t\tBaseModel.__super__.initialize.apply(this, arguments);\n\t}\n});\nreturn BaseModel;",
    "deps": {}
  },
  "models/Category.js": {
    "id": "models/Category.js",
    "type": "js",
    "mtime": 1408691951000,
    "src": "var BaseModel = require(\"./models/BaseModel\");\nvar Category = BaseModel.extend({\n\t\tidAttribute: \"categoryId\",\n\t\tdefaults: {\n\t\t\tcategoryId: \"\",\n\t\t\ttype: \"\",\n\t\t\tname: \"\",\n\t\t\tfamily: \"\",\n\t\t\turl: \"\",\n\t\t\tproducts: []\n\t\t},\n\t\tcomputeds: {\n\t\t\tlabel: {\n\t\t\t\tdeps: ['name'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('name');\n\t\t\t\t}\n\t\t\t},\n\t\t\tvalue: {\n\t\t\t\tdeps: ['categoryId'],\n\t\t\t\tget: function() {\n\t\t\t\t\treturn this.get('categoryId');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\turl: function(options) {\n\t\t\treturn globalApi + \"/categories/\" + this.id;\n\t\t}\n\t});",
    "deps": {}
  }
}